#!/bin/bash

set -e -u

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

#  _____ _____ _____  ______ _____ _      _____  ___   _____ _____   _____ ___  _____  _____
# |  __ \_   _|_   _| | ___ \  ___| |    |  ___|/ _ \ /  ___|  ___| |_   _/ _ \|  __ \/  ___|
# | |  \/ | |   | |   | |_/ / |__ | |    | |__ / /_\ \\ `--.| |__     | |/ /_\ \ |  \/\ `--.
# | | __  | |   | |   |    /|  __|| |    |  __||  _  | `--. \  __|    | ||  _  | | __  `--. \
# | |_\ \_| |_  | |   | |\ \| |___| |____| |___| | | |/\__/ / |___    | || | | | |_\ \/\__/ /
#  \____/\___/  \_/   \_| \_\____/\_____/\____/\_| |_/\____/\____/    \_/\_| |_/\____/\____/
#
# This will check the github repository using the github api to collect tags that match semver regex.
# This is useful for repositories that aren't using actual github releases, and using tags instead (ie, nginx/nginx)
# As long as the release tags follow a consitent naming pattern
#
# The structure of the json is
#   {
#     "source": {
#        "repo": "nginx",
#        "owner": "nginx",
#        "token": "<token>"
#        "per_page": 100,
#        "tag_prefix": "release-"
#     },
#     "version": {
#     }
#   }



tmpdir=${tmpdir:-/tmp}
payload="$(mktemp "${tmpdir}/git-release-tags.XXXXXX")"
cat > "${payload}" <&0

# From payload
api_token=$( jq -r '.source.token // ""' < ${payload})
# Use the access_token=? because the header value wasn't being passed in correctly, otherwise if not provided leave it out the token section from the requests
if [ -z "$api_token" ]; then api_token_header=""; else api_token_header="access_token=$api_token&"; fi
github_repo=$( jq -r '.source.repo // ""' < ${payload})
github_owner=$( jq -r '.source.owner // ""' < ${payload})
github_api_per_page=$( jq -r '.source.per_page // "20"' < ${payload})
release_name=$( jq -r '.source.tag_prefix // ""' < ${payload})
release_version_family=$( jq -r '.source.version_family // ""' < ${payload})
release_version=$( jq -r '.version.version // "latest"' < ${payload})

echo $payload

# Define semver regex formats
# we only want final releases, no dev/pre-release unless there is an easy way to compare 1.1.1RC1 to 1.1.1ALPHA2 and 1.1.1BETA3 and which one comes first
semver_regex_escaped='[\\.]?([0-9]+\\.)?([0-9]+\\.)?([0-9]+)?$'

# Prepare the matching terms for jq
release_test=${release_name}${release_version_family}${semver_regex_escaped}

# Pass it all through a curl request to github api using the release_test variable to make sure we are returning what we need
#github_api_releases=$(curl -s https://api.github.com/repos/${github_owner}/${github_repo}/tags?${api_token_header}per_page=${github_api_per_page} | jq --raw-output '.[].name | select( test("'${release_test}'"))')
echo "curl --max-time 900 --connect-timeout 300 -s https://api.github.com/repos/${github_owner}/${github_repo}/tags?${api_token_header}per_page=${github_api_per_page}"
github_api_releases=$(curl --max-time 900 --connect-timeout 300 -s https://api.github.com/repos/${github_owner}/${github_repo}/tags?${api_token_header}per_page=${github_api_per_page})
echo $github_api_releases
github_api_releases=$(echo $github_api_releases | jq -r '.[].name | select( test("'${release_test}'"))')
# Create a file to dump the results
new_versions_file="${payload}-new-versions"
touch "${new_versions_file}"

# Loop through the results of the curl
for each in $github_api_releases
do
  # Write to the file
  echo "${each:${#release_name}}" >> "${new_versions_file}"
done

# Read the file into mapfile
mapfile -t versions_sorted < "${new_versions_file}"

# Loop through the created map and sort them by semver comparison (can take some time if there are many results to loop through)
for ((i=0; i <= $((${#versions_sorted[@]} - 2)); ++i)); do
  for ((j=((i + 1)); j <= ((${#versions_sorted[@]} - 1)); ++j)); do
    if [[ $(semver compare "${versions_sorted[i]}" "${versions_sorted[j]}") -eq 1 ]]; then
      tmp=${versions_sorted[i]}
      versions_sorted[i]=${versions_sorted[j]}
      versions_sorted[j]=$tmp
    fi
  done
done

# Create the empty json string
versions_json=''

# Check if we are looking for a specific version, or if we just want the latest version
keep_it=false
# If we want the latest, spit it out
if [ "$release_version" == "latest" ]
then
  versions_json="${versions_json},{\"version\":\"${versions_sorted[$((${#versions_sorted[@]}-1))]}\"}"
# Else loop through the list and display versions from requested version onwards
else
  for ((i=0; i < $((${#versions_sorted[@]})); ++i))
  do
    if [[ "${versions_sorted[i]}" == "$release_version" ]]
    then
      keep_it=true
    fi
    if [ "$keep_it" == "true" ]
    then
      versions_json="${versions_json},{\"version\":\"${versions_sorted[i]}\"}"
    fi
  done
fi

# Fix up the json for the result
versions_json="${versions_json#','}"
versions_json="[${versions_json}]"

# Spit out the result
jq -n "${versions_json}" >&3
